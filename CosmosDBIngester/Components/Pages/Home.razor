@page "/"
@rendermode InteractiveServer
@using CosmosDBIngester.Models
@using CosmosDBIngester.Services
@inject CosmosDbService CosmosService

<PageTitle>Cosmos DB Bulk Ingester</PageTitle>

<div class="container-fluid mt-4">
    <h1 class="mb-4">Cosmos DB Bulk Data Ingester</h1>

    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Connection Settings</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Cosmos DB Endpoint</label>
                        <input type="text" class="form-control" @bind="_config.Endpoint" placeholder="https://your-account.documents.azure.com:443/" disabled="@_isConnected" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Primary Key</label>
                        <input type="password" class="form-control" @bind="_config.PrimaryKey" placeholder="Your primary key" disabled="@_isConnected" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Database Name</label>
                        <input type="text" class="form-control" @bind="_config.DatabaseName" placeholder="Database name" disabled="@_isConnected" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Collection/Container Name</label>
                        <input type="text" class="form-control" @bind="_config.CollectionName" placeholder="Collection name" disabled="@_isConnected" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Throughput (RUs) - if collection doesn't exist</label>
                        <input type="number" class="form-control" @bind="_config.ThroughputRUs" min="400" step="100" disabled="@_isConnected" />
                    </div>
                    <button class="btn btn-primary" @onclick="InitializeConnection" disabled="@_isConnected">
                        @(_isConnected ? "Connected" : "Connect")
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Ingestion Settings</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Batch Size (documents per batch)</label>
                        <input type="number" class="form-control" @bind="_config.BatchSize" min="1" max="1000" disabled="@(!_isConnected || _isIngesting)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Document Size (KB)</label>
                        <input type="number" class="form-control" @bind="_config.DocumentSizeKB" min="1" max="100" disabled="@(!_isConnected || _isIngesting)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Workload Type</label>
                        <select class="form-select" @bind="_config.WorkloadType" disabled="@(!_isConnected || _isIngesting)">
                            <option value="Sequential">Sequential (unique partitions)</option>
                            <option value="Random">Random (random partitions)</option>
                            <option value="HotPartition">Hot Partition (same partition)</option>
                        </select>
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-success" @onclick="StartIngestion" disabled="@(!_isConnected || _isIngesting)">
                            Start Ingestion
                        </button>
                        <button class="btn btn-danger" @onclick="StopIngestion" disabled="@(!_isIngesting)">
                            Stop Ingestion
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Status</h5>
                </div>
                <div class="card-body">
                    <div class="alert @(_statusClass)" role="alert">
                        @_statusMessage
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (_currentStats != null)
    {
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Live Statistics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="stat-card">
                                    <div class="stat-value">@_currentStats.TotalDocuments.ToString("N0")</div>
                                    <div class="stat-label">Total Documents</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="stat-card">
                                    <div class="stat-value">@(_currentStats.TotalDataSizeKB / 1024.0).ToString("N2") MB</div>
                                    <div class="stat-label">Total Data Size</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="stat-card">
                                    <div class="stat-value">@_currentStats.DocumentsPerSecond.ToString("N2")</div>
                                    <div class="stat-label">Documents/sec</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="stat-card">
                                    <div class="stat-value">@_currentStats.KBPerSecond.ToString("N2") KB/s</div>
                                    <div class="stat-label">Throughput</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Data Size Over Time</h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <svg width="100%" height="400" viewBox="0 0 800 400" preserveAspectRatio="xMidYMid meet">
                                @* Grid lines *@
                                <line x1="50" y1="50" x2="50" y2="350" stroke="#dee2e6" stroke-width="2"/>
                                <line x1="50" y1="350" x2="750" y2="350" stroke="#dee2e6" stroke-width="2"/>
                                
                                @for (int i = 0; i <= 5; i++)
                                {
                                    var y = 50 + (i * 60);
                                    <line x1="45" y1="@y" x2="750" y2="@y" stroke="#e9ecef" stroke-width="1"/>
                                }

                                @* Chart line *@
                                @if (_statsHistory.Count > 1)
                                {
                                    var maxDataSize = _statsHistory.Max(s => s.TotalDataSizeKB);
                                    var maxX = 700.0;
                                    var maxY = 300.0;
                                    var points = string.Join(" ", _statsHistory.Select((stat, index) => 
                                    {
                                        var x = 50 + (index * maxX / Math.Max(1, _statsHistory.Count - 1));
                                        var y = 350 - (stat.TotalDataSizeKB * maxY / Math.Max(1, maxDataSize));
                                        return $"{x},{y}";
                                    }));
                                    <polyline points="@points" fill="none" stroke="#0d6efd" stroke-width="2"/>
                                    
                                    @foreach (var (stat, index) in _statsHistory.Select((s, i) => (s, i)))
                                    {
                                        var x = 50 + (index * maxX / Math.Max(1, _statsHistory.Count - 1));
                                        var y = 350 - (stat.TotalDataSizeKB * maxY / Math.Max(1, maxDataSize));
                                        <circle cx="@x" cy="@y" r="3" fill="#0d6efd"/>
                                    }
                                }

                                @* Labels *@
                                <g>
                                    <text x="25" y="200" text-anchor="middle" transform="rotate(-90 25 200)" font-size="12" fill="#6c757d">Data Size (MB)</text>
                                </g>
                                <g>
                                    <text x="400" y="380" text-anchor="middle" font-size="12" fill="#6c757d">Time</text>
                                </g>

                                @* Y-axis values *@
                                @if (_statsHistory.Any())
                                {
                                    var maxDataSize = _statsHistory.Max(s => s.TotalDataSizeKB);
                                    @for (int i = 0; i <= 5; i++)
                                    {
                                        var value = maxDataSize * (5 - i) / 5 / 1024.0;
                                        var yPos = 50 + (i * 60);
                                        var textValue = value.ToString("N1");
                                        <g><text x="45" y="@(yPos + 5)" text-anchor="end" font-size="10" fill="#6c757d">@textValue</text></g>
                                    }
                                }
                            </svg>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .stat-card {
        text-align: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        margin-bottom: 10px;
    }
    
    .stat-value {
        font-size: 24px;
        font-weight: bold;
        color: #0d6efd;
    }
    
    .stat-label {
        font-size: 14px;
        color: #6c757d;
        margin-top: 5px;
    }

    .chart-container {
        width: 100%;
        overflow-x: auto;
    }
</style>

@code {
    private CosmosConfig _config = new()
    {
        ThroughputRUs = 400,
        BatchSize = 10,
        DocumentSizeKB = 1,
        WorkloadType = "Sequential"
    };

    private bool _isConnected = false;
    private bool _isIngesting = false;
    private string _statusMessage = "Ready to connect";
    private string _statusClass = "alert-info";
    private IngestionStats? _currentStats = null;
    private List<IngestionStats> _statsHistory = new();
    private CancellationTokenSource? _cancellationTokenSource;

    protected override void OnInitialized()
    {
        CosmosService.OnStatusChanged += HandleStatusChanged;
        CosmosService.OnStatsUpdated += HandleStatsUpdated;
    }

    private async Task InitializeConnection()
    {
        _isConnected = await CosmosService.InitializeAsync(_config);
        if (_isConnected)
        {
            _statusClass = "alert-success";
        }
        else
        {
            _statusClass = "alert-danger";
        }
        StateHasChanged();
    }

    private async Task StartIngestion()
    {
        _isIngesting = true;
        _statsHistory.Clear();
        _cancellationTokenSource = new CancellationTokenSource();
        _statusClass = "alert-info";
        
        await Task.Run(() => CosmosService.StartIngestionAsync(_config, _cancellationTokenSource.Token));
        
        _isIngesting = false;
        StateHasChanged();
    }

    private void StopIngestion()
    {
        _cancellationTokenSource?.Cancel();
        CosmosService.StopIngestion();
        _isIngesting = false;
        _statusClass = "alert-warning";
        StateHasChanged();
    }

    private void HandleStatusChanged(string message)
    {
        _statusMessage = message;
        InvokeAsync(StateHasChanged);
    }

    private void HandleStatsUpdated(IngestionStats stats)
    {
        _currentStats = stats;
        _statsHistory.Add(stats);
        
        if (_statsHistory.Count > 50)
        {
            _statsHistory.RemoveAt(0);
        }
        
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CosmosService.OnStatusChanged -= HandleStatusChanged;
        CosmosService.OnStatsUpdated -= HandleStatsUpdated;
        _cancellationTokenSource?.Dispose();
    }
}
